<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BrowseFiles" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="DecryptH2" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="DecryptHome_btn" xml:space="preserve">
    <value>Start Decrypting!</value>
  </data>
  <data name="Decrypt_desc" xml:space="preserve">
    <value>An authorized party, however, is able to decode the ciphertext using a decryption algorithm, that usually requires a secret decryption key, that adversaries do not have access to. For technical reasons, an encryption scheme usually needs a key-generation algorithm, to randomly produce keys.</value>
  </data>
  <data name="DragArea" xml:space="preserve">
    <value>Drag and drop your files here</value>
  </data>
  <data name="DragDropH2" xml:space="preserve">
    <value>Drag &amp; Drop file upload</value>
  </data>
  <data name="EncryptH2" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="EncryptHome_btn" xml:space="preserve">
    <value>Start Encrypting!</value>
  </data>
  <data name="EncryptUpload_btn" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="Encrypt_desc" xml:space="preserve">
    <value>In cryptography, encryption is the process of encoding a message or information in such a way that only authorized parties can access it. Encryption does not itself prevent interference, but denies the intelligible content to a would-be interceptor. In an encryption scheme, the intended information or message, referred to as plaintext, is encrypted using an encryption algorithm – a cipher – generating ciphertext that can only be read if decrypted.</value>
  </data>
  <data name="ForgotViewModel_displayEmail" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="HowStartH2" xml:space="preserve">
    <value>How to start</value>
  </data>
  <data name="Jumbotron" xml:space="preserve">
    <value>Securypt allows you to encrypt and decrypt your files. Files may be saved locally or stored on a server. Create an account for a public key</value>
  </data>
  <data name="Jumbo_btn" xml:space="preserve">
    <value>Get started</value>
  </data>
  <data name="Tutorial_pt1" xml:space="preserve">
    <value>To get started, register for an account to generate your public key. Keep this saved somewhere where you won't lose it.</value>
  </data>
  <data name="Tutorial_pt2" xml:space="preserve">
    <value>Click on the 'Upload' tab to start. Drag and drop or upload files from your computer onto the upload area. Once all your files have been selected, click "Encrypt" to encrypt your files. After, your encrypted files will be stored locally on your computer or you can choose to store them on a server.</value>
  </data>
  <data name="Tutorial_pt3" xml:space="preserve">
    <value>Decrypting your files is just as easy. Drag and drop or upload your encrypted files for decryption.</value>
  </data>
  <data name="UploadedFilesH2" xml:space="preserve">
    <value>Uploaded Files</value>
  </data>
  <data name="Upload_alt" xml:space="preserve">
    <value>Or upload your files here</value>
  </data>
  <data name="Wikipedia" xml:space="preserve">
    <value>From Wikipedia, the free encyclopedia</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Why would you want to contact us?</value>
  </data>
  <data name="Items_create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Items_delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Items_details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Items_edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Items_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Items_publicKey" xml:space="preserve">
    <value>Public Key</value>
  </data>
  <data name="Items_storageLoc" xml:space="preserve">
    <value>Storage Location</value>
  </data>
  <data name="ManageH4" xml:space="preserve">
    <value>Change your account settings</value>
  </data>
  <data name="Manage_changePassActLink" xml:space="preserve">
    <value>Change your password</value>
  </data>
  <data name="Manage_createActLink" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Manage_manageActLink" xml:space="preserve">
    <value>Manage</value>
  </data>
  <data name="Manage_publicKey" xml:space="preserve">
    <value>Public Key</value>
  </data>
  <data name="Shared_greeting" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="Upload_success" xml:space="preserve">
    <value>file(s) uploaded successfully</value>
  </data>
  <data name="About_p1" xml:space="preserve">
    <value>In the download page, you can view, edit, and manage your files.</value>
  </data>
  <data name="About_p2" xml:space="preserve">
    <value>Currently, all your uploaded files are private, meaning only you can view them. If you wish to change this select the "Edit" button and uncheck the private box.</value>
  </data>
  <data name="About_link" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Contact_link" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Download_link" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="Home_link" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Upload_link" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
</root>