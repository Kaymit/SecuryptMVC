using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;

namespace SecuryptMVC.Models
{
    /// <summary>
    /// EncryptedItem Entity Framework domain model
    /// Represents a single encrypted file/item in the file system and database
    /// Workaround: Entity Framework can't store lists of primitives like strings,
    ///     instead Public Property exposes a list that is serialized into a comma
    ///     separated value string, which is stored in the database.
    /// </summary>
    /// <author>
    /// Kevin Mitchell 15/11/2017 - 5/12/2017
    /// </author>
    public class EncryptedItem
    {
		/// <summary>
		/// Unique ID auto-generated by Entity Framework
		/// </summary>
		[Display(Name = "Item ID")]
        public int		        ID				{ get; set; }

        /// <summary>
        /// USer ID of owner, auto-generated by Entity Framework upon account creation
        /// </summary>
        [Required]
		[Display(Name = "Owner's Email")]
		public string           OwnerID { get; set; }

        /// <summary>
        /// Used to display owner's email without storing it in database
        /// </summary>
        [NotMapped]
        [Display(Name = "Email")]
        public string           OwnerEmail { get; set; }

        /// <summary>
        /// List of UserIDs with permission to decrypt and download item
        /// </summary>
        private List<String> _PermittedUserIDs { get; set; }

        /// <summary>
        /// Workaround property for lack of List<string> support in EF
        /// https://stackoverflow.com/questions/20711986/entity-framework-code-first-cant-store-liststring
        /// </summary>
        public List<string> PermittedUserIDs
        {
            get { return _PermittedUserIDs; }
            set { _PermittedUserIDs = value; }
        }

        /// <summary>
        /// Allows storing a list of strings without creating a second table with rows for each permission
        /// </summary>
        public string PermittedUserIDsAsString
        {
            get { return String.Join(",", _PermittedUserIDs); }
            set { _PermittedUserIDs = value.Split(',').ToList(); }
        }

        /// <summary>
        /// Whether or not EncryptedItem is private to user
        /// </summary>
        [Display(Name = "Private")]
		public bool		        IsPrivate		{ get; set; }

		/// <summary>
		/// Filename available for searching
		/// </summary>
        [Required]
        [Display(Name = "Name")]
        public string	        Name			{ get; set; }

		/// <summary>
		/// File system storage path
		/// </summary>
        [Required]
        [Display(Name = "File Storage Path")]
		public string	        StorageLocation { get; set; }

        [MaxLength(500)]
        [Display(Name = "Description of Item")]
        public string           Description     { get; set; }
    }

    /// <summary>
    /// ViewModel used to display Users permitted to access a file
    /// </summary>
    /// <author>
    /// Kevin Mitchell 28/11/2017
    /// </author>
    public class PermittedUsersViewModel
    {
        public int ItemID                       { get; set; }
        public string UserIDToAdd               { get; set; }
        public List<String> PermittedUserIDs    { get; set; }
        public List<String> PermittedUserEmails { get; set; }
    }

    /// <summary>
    /// ViewModel used to display properties while editing
    /// </summary>
    /// <author>
    /// Kevin Mitchell 28/11/2017
    /// </author>
    public class EditViewModel
    {
        public int ItemID { get; set; }
        public string Name { get; set; }
        public string StorageLocation { get; set; }
        public string OwnerID { get; set; }
        public bool IsPrivate { get; set; }
        public string Description { get; set; }
    }

    /// <summary>
    /// ViewModel used to submit editable properties
    /// </summary>
    /// /// <author>
    /// Kevin Mitchell 4/12/2017
    /// </author>
    public class EditableItemPropertiesViewModel
    {
        public int ItemID { get; set; }
        public bool IsPrivate { get; set; }
        public string Description { get; set; }
    }
}